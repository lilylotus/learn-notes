CN=subca_root_rsa, C=CN -> {CertificateChain@15006} 


CN=KoalCa, OU=格尔软件, O=上海格尔软件股份有限公司, L=上海市, ST=上海, C=CN

CN=subca_root_sm2, C=CN
CN=subca_root_rsa, C=CN


# 生成 CA
# 生成CA私钥(ca.key)
openssl genrsa -des3 -out ca.key 2048
# 生成CA证书签名请求(ca.csr)
openssl req -new -key ca.key -out ca.csr
# 生成自签名CA证书(ca.cert)
openssl x509 -req -days 3650 -in ca.csr -signkey ca.key -out ca.crt

# 生成 Server 证书
# 生成服务端私钥(server.key)
openssl genrsa -des3 -out server.key 2048 
# 生成服务端证书签名请求(server.csr)
openssl req -new -key server.key -out server.csr
# 使用ca证书签署服务端csr以生成服务端证书(server.cert)
openssl ca -days 3650 -in server.csr -out server.crt -cert ca.crt -keyfile ca.key 


# 生成 Client 证书（用于双向认证）
# 生成客户端私钥(client.key)
openssl genrsa -des3 -out client.key 2048
# 生成客户端证书签名请求(client.csr)
openssl req -new -key client.key -out client.csr
# 使用ca证书签署客户端csr以生成客户端证书(client.cert)
openssl ca -days 3650 -in client.csr -out client.crt -cert ca.crt -keyfile ca.key

# 查看证书内容
openssl x509 -in server.crt -noout -text


CN=subca_root_rsa, C=CN

首先生成X509格式的CA自签名证书 
openssl req -new -x509 -keyout pfxca.key -out pfxca.crt -days 365
生成 ssl 客户端的私钥(key文件)及csr文件 
openssl genrsa -des3 -out client.key 2048 -days 365
openssl req -new -key client.key -out client.csr -days 365
用生成的 CA 的证书为刚才生成的 client.csr 文件签名 
openssl ca -in client.csr -out client.crt -cert pfxca.crt -keyfile pfxca.key -days 365
生成 p12 格式证书 
openssl pkcs12 -export -inkey client.key -in client.crt -out client.pfx

========================================
https://www.cnblogs.com/ouyanxia/p/12427955.html

1.使用 openssl 生成 pkcs8 格式秘钥

私钥生成命令：openssl genrsa -out private_pkcs1.pem 2048
公钥生成命令：openssl rsa -in private_pkcs1.pem -pubout -out public.pem
使用时可直接提取文件里面的字符串秘钥，或者直接读取对应的秘钥文件。

通过已有的 pfx 证书文件提取公私钥命令：
openssl pkcs12 -in certificate_p12.pfx -out private_pkcs8.pem -nodes -nocerts
openssl rsa -in private_pkcs8.pem -pubout -out public.pem

2.生成 pfx 文件
生成 key，openssl.key 为 key 的名字随意起，1024 为密钥长度
openssl genrsa -out openssl.key 2048
# openssl key 脱密码
openssl rsa -in openssl.key -out server.key

生成 cer 证书（openssl.key 为之前生成的 key 的名字，openssl.cer 为生成的证书名字，3650 为证书过期天数，CN 的参数 ***.website 是的你主机名或者IP地址(这里一定要写对，不然以后访问的话，浏览器会提示有风险)。
openssl req -new -x509 -key openssl.key -out openssl.cer -days 3650 -subj "/CN=userId,c=CN"

生成需要的pfx私钥文件（会让你输入密码，使用私钥时候使用的（千万不能忘记））
openssl pkcs12 -export -out openssl.pfx -inkey openssl.key -in openssl.cer

生成crt证书（由于手机需要crt证书，所以需要的话还要生成crt）
openssl req -new -x509 -key openssl.key -out openssl.crt -days 3650 -subj "/CN=userId,/C=CN"

openssl pkcs12 -in openssl.pfx -nocerts -nodes -out 555555.key
openssl pkcs12 -in openssl.pfx -nodes -out 777777.pem

openssl req -new -SHA256 -newkey rsa:2048 -nodes -keyout nihility.cn.key -out nihility.cn.csr -subj "/C=CN/ST=Shanghai/L=Shanghai/O=nihility/OU=nihility/CN=nihility.cn"

不同证书文件格式der、cer、pfx、pem区别
.*DER*：用二进制DER编码的证书；

.PEM：用ASCLL(BASE64)编码的证书；

.CER：存放公钥，没有私钥；

.PFX：存放公钥和私钥

（pem 后缀的证书都是base64编码；der 后缀的证书都是二进制格式；crt .cer 后缀的文件都是证书文件（编码方式不一定，有可能是.pem,也有可能是.der）；.pfx 主要用于windows平台，浏览器可以使用，也是包含证书和私钥，获取私钥需要密码才可以）

X509文件扩展名（x509 这种证书只有公钥，不包含私钥。）


============================
openssl genrsa -des3 -out server.key 2048
openssl req -new -key server.key -out server.csr
cp server.key server.key.org
openssl rsa -in server.key.org -out server.key
openssl x509 -req -days 365 -in server.csr -signkey server.key -out server.crt

# https://goharbor.io/docs/2.4.0/install-config/configure-https/

生成证书颁发机构证书
1. Generate a CA certificate private key.
openssl genrsa -out ca.key 4096

2. Generate the CA certificate（证书）.
openssl req -x509 -new -nodes -sha512 -days 3650 \
 -subj "/C=CN/ST=Shanghai/L=Shanghai/O=example/OU=Personal/CN=yourdomain.com" \
 -key ca.key \
 -out ca.crt

生成服务器证书，证书通常包含一个 .crt 文件和一个 .key 文件
1. 生成私钥
openssl genrsa -out yourdomain.com.key 4096

2. 生成证书签名请求 (CSR)
openssl req -sha512 -new \
    -subj "/C=CN/ST=Shanghai/L=Shanghai/O=example/OU=Personal/CN=yourdomain.com" \
    -key yourdomain.com.key \
    -out yourdomain.com.csr

3. 生成 x509 v3 扩展文件
cat > v3.ext << EOF
authorityKeyIdentifier=keyid,issuer
basicConstraints=CA:FALSE
keyUsage = digitalSignature, nonRepudiation, keyEncipherment, dataEncipherment
extendedKeyUsage = serverAuth
subjectAltName = @alt_names

[alt_names]
DNS.1=harbor.nihility.cn
DNS.2=nihility.cn
DNS.3=nihility
EOF

openssl x509 -req -sha512 -days 3650 \
    -extfile v3.ext \
    -CA ca.crt -CAkey ca.key -CAcreateserial \
    -in yourdomain.com.csr \
    -out yourdomain.com.crt

openssl x509 -inform PEM -in yourdomain.com.crt -out yourdomain.com.cert