类图（ClassDiagram）
展现了一组对象、接口、协作和它们之间的关系。
类图描述的是一种静态关系，在系统的整个生命周期都是有效的，是面向对象系统的建模中最常见的图。

对象图（ObjectDiagram）
展现了一组对象以及它们之间的关系。对象图是类图的实例，几乎使用与类图完全相同的标示。

用例图（UseCaseDiagram）
展现了一组用例、参与者（actor）以及它们之间的关系。
用例图从用户角度描述系统的静态使用情况，用于建立需求模型。

交互图
用于描述对象间的交互关系，由一组对象和它们之间的关系组成，包含它们之间可能传递的消息。
交互图又分为序列图和协作图，
序列图描述了以时间顺序组织的对象之间的交互活动；
协作图强调收发消息的对象的结构组织。

状态图（StateDiagram）
由状态、转换、事件和活动组成，描述类的对象所有可能的状态以及事件发生时的转移条件。
通常状态图是对类图的补充，仅需为那些有多个状态的、行为随外界环境而改变的类画状态图。

活动图（ActiveDiagram）
一种特殊的状态图，展现了系统内一个活动到另一个活动的流程。活动图有利于识别并行活动。

组件图（ComponentDiagram）
展现了一组组件的物理结构和组件之间的依赖关系。部件图有助于分析和理解组件之间的相互影响程度。

部署图（DeploymentDiagram）
展现了运行处理节点以及其中的组件的配置。
部署图给出了系统的体系结构和静态实施视图。它与组件图相关，通常一个节点包含一个或多个构建。

----------------------------------------------------------------------------
1、用例图（UseCase Diagrams）
从用户的角度描述了系统的功能，并指出各个功能的执行者，强调用户的使用者，系统为执行者完成哪些功能。
用例图主要回答了两个问题：1、是谁用软件。2、软件的功能。

2、类图（Class Diagrams）：
用户根据用例图抽象成类，描述类的内部结构和类与类之间的关系，是一种静态结构图。 在UML类图中，常见的有以下几种关系:
泛化（Generalization）,实现（Realization），关联（Association)
聚合（Aggregation），组合(Composition)，依赖(Dependency)。
各种关系的强弱顺序： 泛化 = 实现 > 组合 > 聚合 > 关联 > 依赖

3、对象图（Object Diagrams）:
描述的是参与交互的各个对象在交互过程中某一时刻的状态。对象图可以被看作是类图在某一时刻的实

4、状态图（Statechart Diagrams）：
是一种由状态、变迁、事件和活动组成的状态机，用来描述类的对象所有可能的状态以及时间发生时状态的转移条件

5、活动图（Activity Diagrams）：
是状态图的一种特殊情况，这些状态大都处于活动状态。本质是一种流程图，它描述了活动到活动的控制流。
交互图强调的是对象到对象的控制流，而活动图则强调的是从活动到活动的控制流。
活动图是一种表述过程基理、业务过程以及工作流的技术。
它可以用来对业务过程、工作流建模，也可以对用例实现甚至是程序实现来建模。

6、序列图-时序图（Sequence Diagrams）：
交互图的一种，描述了对象之间消息发送的先后顺序，强调时间顺序。
序列图的主要用途是把用例表达的需求，转化为进一步、更加正式层次的精细表达。
用例常常被细化为一个或者更多的序列图。
同时序列图更有效地描述如何分配各个类的职责以及各类具有相应职责的原因。