<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/aop
       http://www.springframework.org/schema/aop/spring-aop-4.3.xsd
       http://www.springframework.org/schema/tx
       http://www.springframework.org/schema/tx/spring-tx-4.3.xsd
       http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context-4.3.xsd">

    <!-- 引入properties数据库配置文件 -->
    <context:property-placeholder location="classpath:dbconfig/*.properties"/>

    <!-- 配置数据源 -->
    <bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
        <property name="driverClass" value="${jdbc.classDriver}"/>
        <property name="jdbcUrl" value="${jdbc.url}"/>
        <property name="user" value="${jdbc.user}"/>
        <property name="password" value="${jdbc.password}"/>
        <property name="minPoolSize" value="${pool.minPoolSize}"/>
        <property name="maxPoolSize" value="${pool.maxPoolSize}"/>
        <property name="initialPoolSize" value="${pool.initialPoolSize}"/>
        <property name="acquireIncrement" value="${pool.acquireIncrement}"/>
        <property name="acquireRetryAttempts" value="${pool.acquireRetryAttempts}"/>
        <property name="acquireRetryDelay" value="${pool.acquireRetryDelay}"/>
        <property name="maxIdleTime" value="${pool.maxIdleTime}"/>
        <property name="numHelperThreads" value="${pool.numHelperThreads}"/>
        <property name="maxStatementsPerConnection" value="${pool.maxStatementsPerConnection}"/>
    </bean>

    <!-- 定义一个事务的管理器，从而进行所有事务的统一管理 -->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"/>
    </bean>

    <bean id="transactionDao" class="cn.nihility.transaction3.dao.TransactionDaoImpl">
        <property name="dataSource" ref="dataSource"/>
    </bean>
    <bean id="transactionService" class="cn.nihility.transaction3.service.TransactionServiceImpl">
        <property name="transactionDao" ref="transactionDao"/>
    </bean>

    <!-- 配置事务增强　进行事务通知-->
    <tx:advice id="txAdvice" transaction-manager="transactionManager">
        <tx:attributes>
            <!--
            propagation :事务传播行为
            isolation   :事务的隔离级别
            read-only   :只读
            rollback-for:发生哪些异常回滚
            no-rollback-for :发生哪些异常不回滚
            timeout     :过期信息
            -->
<!--
事务传播行为：（七种）
PROPAGATION_REQUIRED - 支持当前事务，如果当前没有事务，就新建一个事务。这是最常见的选择。
PROPAGATION_SUPPORTS - 支持当前事务，如果当前没有事务，就以非事务方式执行。
PROPAGATION_MANDATORY - 支持当前事务，如果当前没有事务，就抛出异常。

PROPAGATION_REQUIRES_NEW - 新建事务，如果当前存在事务，把当前事务挂起。
PROPAGATION_NOT_SUPPORTED - 以非事务方式执行操作，如果当前存在事务，就把当前事务挂起。
PROPAGATION_NEVER - 以非事务方式执行，如果当前存在事务，则抛出异常。

PROPAGATION_NESTED - 如果当前存在事务，则在嵌套事务内执行。如果当前没有事务，则进行与REQUIRED类似的操作。
拥有多个可以回滚的保存点，内部回滚不会对外部事务产生影响。只对DataSourceTransactionManager有效

事务隔离级别：（五种）
DEFAULT - 使用后端数据库默认的隔离级别（Spring中的选择项）
READ_UNCOMMITED - 允许你读取还未提交的改变了的数据。可能导致脏、幻、不可重复读
READ_COMMITTED - 允许在并发事务已经提交后读取。可防止脏读，但幻读和不可重复读仍可发生
REPEATABLE_READ - 对相同字段的多次读取是一致的，除非数据被事务本身改变。可防止脏、不可重复读，但幻读仍可能发生
SERIALIZABLE - 完全服从ACID的隔离级别，确保不发生脏、幻、不可重复读。
这在所有的隔离级别中是最慢的，它是典型的通过完全锁定在事务中涉及的数据表来完成的
其中，MySQL默认采用REPEATABLE_READ隔离级别；Oracle默认采用READ_COMMITTED隔离级别
-->
            <!-- no-rollback-for="ArithmeticException" -->
            <tx:method name="transfer" propagation="REQUIRED" />
        </tx:attributes>
    </tx:advice>

    <!-- 配置相应的切面　-->
    <aop:config>
        <!-- 配置切入点　-->
        <aop:pointcut id="pointcut1"
                      expression="execution(* cn.nihility.transaction3.service.TransactionService+.*(..))" />
        <!-- 配置切面　-->
        <aop:advisor advice-ref="txAdvice" pointcut-ref="pointcut1" />
    </aop:config>
</beans>