1.  过滤器  -- 解决从页面传来的字符串的编码问题
    <filter>  
        <filter-name>characterEncodingFilter</filter-name>  
        <filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>  
        <init-param>  
            <param-name>encoding</param-name>  
            <param-value>UTF-8</param-value>  
        </init-param>  
        <init-param>  
            <param-name>forceEncoding</param-name>  
            <param-value>true</param-value>  
        </init-param>  
    </filter>  
    <filter-mapping>  
        <filter-name>characterEncodingFilter</filter-name>  
        <url-pattern>/*</url-pattern>  
    </filter-mapping>  

2. 配置监听器ContextLoaderListener
 ContextLoaderListener的作用就是启动Web容器时，自动装配ApplicationContext的配置信息
<listener>  
        <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>  
</listener>  

2.1 部署applicationContext的xml文件
如果在web.xml中不写任何参数配置信息，默认的路径是/WEB-INF/applicationContext.xml
<context-param>  
    <param-name>contextConfigLocation</param-name>  
    <param-value>classpath:spring/applicationContext.xml</param-value>  
</context-param>

你的DispatcherServlet拦截"/"，为了实现REST风格，拦截了所有的请求，那么同时对*.js,*.jpg等静态文件的访问也就被拦截了
要写在DispatcherServlet的前面， 让 defaultServlet先拦截请求，这样请求就不会进入Spring了，我想性能是最好的吧
 <servlet-mapping>  
        <servlet-name>default</servlet-name>  
        <url-pattern>*.css</url-pattern>  
    </servlet-mapping>  
    <servlet-mapping>  
        <servlet-name>default</servlet-name>  
        <url-pattern>*.swf</url-pattern>  
    </servlet-mapping>  
    <servlet-mapping>  
        <servlet-name>default</servlet-name>  
        <url-pattern>*.gif</url-pattern>  
    </servlet-mapping>  
    <servlet-mapping>  
        <servlet-name>default</servlet-name>  
        <url-pattern>*.jpg</url-pattern>  
    </servlet-mapping>  
    <servlet-mapping>  
        <servlet-name>default</servlet-name>  
        <url-pattern>*.png</url-pattern>  
    </servlet-mapping>  
    <servlet-mapping>  
        <servlet-name>default</servlet-name>  
        <url-pattern>*.js</url-pattern>  
    </servlet-mapping>  
    <servlet-mapping>  
        <servlet-name>default</servlet-name>  
        <url-pattern>*.html</url-pattern>  
    </servlet-mapping>  
    <servlet-mapping>  
        <servlet-name>default</servlet-name>  
        <url-pattern>*.xml</url-pattern>  
    </servlet-mapping>  
    <servlet-mapping>  
        <servlet-name>default</servlet-name>  
        <url-pattern>*.json</url-pattern>  
    </servlet-mapping>  
    <servlet-mapping>  
        <servlet-name>default</servlet-name>  
        <url-pattern>*.map</url-pattern>  
    </servlet-mapping>  

3. 拦截匹配的请求
Spring MVC,配置DispatcherServlet是第一步。DispatcherServlet是一个Servlet,,所以可以配置多个DispatcherServlet
Servlet拦截匹配规则要自已定义，把拦截下来的请求，依据某某规则分发到目标Controller(我们写的Action)来处理

<servlet>  
    <servlet-name>DispatcherServlet</servlet-name>
    <!--在DispatcherServlet的初始化过程中，框架会在web应用的 WEB-INF文件夹
    下寻找名为[servlet-name]-servlet.xml 的配置文件，生成文件中定义的bean。
    -->  
    <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>  
    <!--指明了配置文件的文件名，不使用默认配置文件名，而使用dispatcher-servlet.xml配置文件。-->  
    <init-param>  
        <param-name>contextConfigLocation</param-name>  
        <!--其中<param-value>**.xml</param-value> 这里可以使用多种写法-->  
        <!--1、不写,使用默认值:/WEB-INF/<servlet-name>-servlet.xml-->  
        <!--2、<param-value>/WEB-INF/classes/dispatcher-servlet.xml</param-value>-->  
        <!--3、<param-value>classpath*:dispatcher-servlet.xml</param-value>-->  
        <!--4、多个值用逗号分隔-->  
        <param-value>classpath:spring/dispatcher-servlet.xml</param-value>  
    </init-param>  
    <load-on-startup>1</load-on-startup><!--是启动顺序，让这个Servlet随Servletp容器一起启动。-->  
</servlet>  
<servlet-mapping>  
    <!--这个Servlet的名字是dispatcher，可以有多个DispatcherServlet，是通过名字来区分的。每一个DispatcherServlet有自己的WebApplicationContext上下文对象。同时保存的ServletContext中和Request对象中.-->  
    <!--ApplicationContext是Spring的核心，Context我们通常解释为上下文环境，我想用“容器”来表述它更容易理解一些，ApplicationContext则是“应用的容器”了:P，Spring把Bean放在这个容器中，在需要的时候，用getBean方法取出-->  
    <servlet-name>DispatcherServlet</servlet-name>  
    <!--Servlet拦截匹配规则可以自已定义，当映射为@RequestMapping("/user/add")时，为例,拦截哪种URL合适？-->  
    <!--1、拦截*.do、*.htm， 例如：/user/add.do,这是最传统的方式，最简单也最实用。不会导致静态文件（jpg,js,css）被拦截。-->  
    <!--2、拦截/，例如：/user/add,可以实现现在很流行的REST风格。很多互联网类型的应用很喜欢这种风格的URL。弊端：会导致静态文件（jpg,js,css）被拦截后不能正常显示。 -->  
    <url-pattern>/</url-pattern> <!--会拦截URL中带“/”的请求。-->  
</servlet-mapping>  

<welcome-file-list><!--指定欢迎页面-->  
    <welcome-file>login.html</welcome-file>  
</welcome-file-list>  
<error-page> <!--当系统出现404错误，跳转到页面nopage.html-->  
    <error-code>404</error-code>  
    <location>/nopage.html</location>  
</error-page>  
<error-page> <!--当系统出现java.lang.NullPointerException，跳转到页面error.html-->  
    <exception-type>java.lang.NullPointerException</exception-type>  
    <location>/error.html</location>  
</error-page>  
<session-config><!--会话超时配置，单位分钟-->  
    <session-timeout>360</session-timeout>  
</session-config>  

============================================================

============================================================
spring在web.xml中可以有三种方式来配置其xml路径：
org.springframework.web.servlet.DispatcherServlet
org.springframework.web.context.ContextLoaderListener
org.springframework.web.context.ContextLoaderServlet
当 使用第一种方式配置时，spring载入的WebApplicationContext是隶属于此Servlet的（所以spring可以配置多个分别拥 有各自环境的DispatcherServlet），因此其他servlet无法获取到该Context。

org.springframework.web.servlet.DispatcherServlet
是使用Spring MVC时的Front Controller，并不会初始化applicationContext。
只适用它，肯定会找不到bean定义。

web程序必须使用org.springframework.web.context.ContextLoaderListener
org.springframework.web.context.ContextLoaderServlet
这两种中的一种来初始化container

============================================================