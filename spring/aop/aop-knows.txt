1. Joinpoint（连接点）
被拦截到的点，因为Spring只支持方法类型的连接点，所以在Spring中连接点指的就是被拦截到的方法
实际上连接点还可以是字段或者构造器

Proceedingjoinpoint 继承了 JoinPoint 。
是在JoinPoint的基础上暴露出 proceed 这个方法。proceed很重要，这个是aop代理链执行的方法。
暴露出这个方法，就能支持 aop:around 这种切面（而其他的几种切面只需要用到JoinPoint，这跟切面类型有关），
能决定是否走代理链还是走自己拦截的其他逻辑。
建议看一下 JdkDynamicAopProxy的invoke方法，了解一下代理链的执行原理。

2. Pointcut（切入点）
这是一组一个或多个连接点，通知应该被执行。你可以使用表达式或模式指定切入点正如我们将在 AOP 的例子中看到的

3. Advice（通知）
这是实际行动之前或之后执行的方法。这是在程序执行期间通过 Spring AOP 框架实际被调用的代码

4. Aspect（切面）
一个模块具有一组提供横切需求的 APIs。例如，一个日志模块为了记录日志将被 AOP
方面调用。应用程序可以拥有任意数量的方面，这取决于需求

5. Weaving（织入）
Weaving 把方面连接到其它的应用程序类型或者对象上，并创建一个被通知的对象。
这些可以在编译时，类加载时和运行时完成

6. Introduction（引入）
在不修改代码的前提下，引入可以在运行期为类动态地添加一些方法或字段
 
Proxy（代理） :一个类被 AOP 织入增强后，就产生一个结果代理类
Aspect(切面): 是切入点和通知（引介）的结合 

=========================================================
通知的类型
前置通知（before）    在一个方法执行之前，执行通知。
后置通知（after）     在一个方法执行之后，不考虑其结果，执行的通知。
返回后通知（after-returning）   在一个方法执行之后，只有在方法成功完成时，才能执行通知。
抛出异常后通知（after-throwing） 在一个方法执行之后，只有在方法退出抛出异常时，才能执行通知。
环绕通知（around）    在建议方法调用之前和之后，执行通知。

AspectJ 注解说明
@Before     前置通知，在连接点方法前调用
@Around     环绕通知，它将覆盖原有的方法，但是允许通过反射调用原有的方法
@After      后置通知，在连接点方法后调用
@AfterReturning 返回通知，在连接点方法执行并正常返回后调用，要求连接点方法执行过程中没有发生异常
@AfterThrowing  异常通知，当连接点方法异常时调用