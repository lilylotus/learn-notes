Docker 数据管理
容器中管理数据主要有两种方式：
1. 数据卷（Volumes）:
数据卷 是一个可供一个或多个容器使用的特殊目录，它绕过 UFS，可以提供很多有用的特性：
> 数据卷 可以在容器之间共享和重用
> 对 数据卷 的修改会立马生效
> 对 数据卷 的更新，不会影响镜像
> 数据卷 默认会一直存在，即使容器被删除
注意： 数据卷 的使用，类似于 Linux 下对目录或文件进行 mount，
镜像中被指定为挂载点的目录中的文件会隐藏掉，能显示看的是挂载的 数据卷 。

1.1 创建一个 数据卷：
docker volume create <volume-name>
1.2 查看所有 数据卷 ：
docker volume ls
1.3 查看指定的 数据卷 的信息：
docker volume inspect <volume-name>
1.4 启动一个挂载数据卷的容器：
docker run 命令的时候，使用 --mount 标记来将 数据卷 挂载到容器里。在一次 docker run 中可以挂载多个 数据卷 。
docker run -d -P \
--name webserver \
--mount source=volume-name,target=/mount-point \
ubuntu:18.04

1.5 删除数据卷
docker volume rm <volume-name>
docker rm -v  <ID>(删除容器的同时移除数据卷)
docker volume prune (无主的数据卷可能会占据很多空间,清空无主的数据卷)

2. 挂载主机目录 (Bind mounts) :
使用 --mount 标记可以指定挂载一个本地主机的目录到容器中去。
docker run -d -P -name webserver \
--mount type=bind,source=/src/webapp,target=/opt/webapp \
ubuntu:18.04

本地目录的路径必须是绝对路径，以前使用 -v 参数时如果本地目录不存在 Docker 会自动为你创建一个文件夹
现在使用 --mount 参数时如果本地目录不存在，Docker 会报错。
Docker 挂载主机目录的默认权限是 读写 ，用户也可以通过增加 readonly 指定为 只读 。
(--mount type=bind,source=/src/webapp,target=/opt/webapp,readonly)

