1. 读取键盘输入
raw_input
input

raw_input([prompt]) 函数从标准输入读取一个行，并返回一个字符串（去掉结尾的换行符）：
str = raw_input("请输入：");
print "你输入的内容是: ", str

nput([prompt]) 函数和raw_input([prompt]) 函数基本可以互换，
但是input会假设你的输入是一个有效的Python表达式，并返回运算结果。

str = input("Enter your input: ");
print "Received input is : ", str

Enter your input: [x*5 for x in range(2,10,2)]
Recieved input is :  [10, 20, 30, 40]

========================================================================

========================================================================
1. 打开和关闭文件

1.1 open函数
用Python内置的open()函数打开一个文件，创建一个file对象，相关的辅助方法才可以调用它进行读写。
file object = open(file_name [, access_mode][, buffering])

buffering:如果buffering的值被设为0，就不会有寄存。如果buffering的值取1，访问文件时会寄存行。
如果将buffering的值设为大于1的整数，表明了这就是的寄存区的缓冲大小。
如果取负值，寄存区的缓冲大小则为系统默认。

r   以只读方式打开文件。文件的指针将会放在文件的开头。这是默认模式。
rb  以二进制格式打开一个文件用于只读。文件指针将会放在文件的开头。这是默认模式。
r+  打开一个文件用于读写。文件指针将会放在文件的开头。
rb+ 以二进制格式打开一个文件用于读写。文件指针将会放在文件的开头。
w   打开一个文件只用于写入。如果该文件已存在则将其覆盖。如果该文件不存在，创建新文件。
wb  以二进制格式打开一个文件只用于写入。如果该文件已存在则将其覆盖。如果该文件不存在，创建新文件。
w+  打开一个文件用于读写。如果该文件已存在则将其覆盖。如果该文件不存在，创建新文件。
wb+ 以二进制格式打开一个文件用于读写。如果该文件已存在则将其覆盖。如果该文件不存在，创建新文件。
a   打开一个文件用于追加。如果该文件已存在，文件指针将会放在文件的结尾
    也就是说，新的内容将会被写入到已有内容之后。如果该文件不存在，创建新文件进行写入。
ab  以二进制格式打开一个文件用于追加。如果该文件已存在，文件指针将会放在文件的结尾。
    新的内容将会被写入到已有内容之后。如果该文件不存在，创建新文件进行写入。
a+  打开一个文件用于读写。如果该文件已存在，文件指针将会放在文件的结尾。文件打开时会是追加模式。
    如果该文件不存在，创建新文件用于读写。
ab+ 以二进制格式打开一个文件用于追加。如果该文件已存在，文件指针将会放在文件的结尾。
    如果该文件不存在，创建新文件用于读写。

file.closed 返回true如果文件已被关闭，否则返回false。
file.mode   返回被打开文件的访问模式。
file.name   返回文件的名称。
file.softspace  如果用print输出后，必须跟一个空格符，则返回false。否则返回true。


1.2 Write()方法
Write()方法可将任何字符串写入一个打开的文件。不在字符串的结尾不添加换行符('\n')：

1.3 read()方法
read（）方法从一个打开的文件中读取一个字符串。
需要重点注意的是，Python字符串可以是二进制数据，而不是仅仅是文字。
fileObject.read([count]);

seek（offset [,from]）方法改变当前文件的位置。
Offset变量表示要移动的字节数。From变量指定开始移动字节的参考位置。
如果from被设为0，这意味着将文件的开头作为移动字节的参考位置。
如果设为1，则使用当前的位置作为参考位置。
如果它被设为2，那么该文件的末尾将作为参考位置。


2. os模块提供了帮你执行文件处理操作的方法

2.1 rename()方法需要两个参数，当前的文件名和新文件名。
os.rename(current_file_name, new_file_name)

2.2 remove()方法
你可以用remove()方法删除文件，需要提供要删除的文件名作为参数。
os.remove(file_name)

3. Python里的目录

3.1 mkdir()方法
可以使用os模块的mkdir()方法在当前目录下创建新的目录们。你需要提供一个包含了要创建的目录名称的参数。
os.mkdir("newdir")

3.2 chdir()方法
可以用chdir()方法来改变当前的目录。chdir()方法需要的一个参数是你想设成当前目录的目录名称。

3.3 getcwd()方法：
getcwd()方法显示当前的工作目录。

3.4 rmdir()方法
rmdir()方法删除目录，目录名称以参数传递。
在删除这个目录之前，它的所有内容应该先被清除。

===========================================================================