================================================================
1. 创建类
class ClassName:
   '类的帮助信息'   #类文档字符串
   class_suite  #类体

2. 
方法__init__()方法是一种特殊的方法，被称为类的构造函数或初始化方法，
当创建了这个类的实例时就会调用该方法

3. 
你可以添加，删除，修改类的属性：
emp1.age = 7  # 添加一个 'age' 属性
emp1.age = 8  # 修改 'age' 属性
del emp1.age  # 删除 'age' 属性

也可以使用以下函数的方式来访问属性：
hasattr(emp1, 'age')    # 如果存在 'age' 属性返回 True。
getattr(emp1, 'age')    # 返回 'age' 属性的值
setattr(emp1, 'age', 8) # 添加属性 'age' 值为 8
delattr(empl, 'age')    # 删除属性 'age'

4. Python内置类属性
__dict__ : 类的属性（包含一个字典，由类的数据属性组成）
__doc__ :类的文档字符串
__name__: 类名
__module__: 类定义所在的模块
（类的全名是'__main__.className'，如果类位于一个导入模块mymod中，
那么className.__module__ 等于 mymod）
__bases__ : 类的所有父类构成元素（包含了以个由所有父类组成的元组）

5. 对象销毁(垃圾回收)
Python使用了引用计数这一简单技术来追踪内存中的对象。
在Python内部记录着所有使用中的对象各有多少引用。
一个内部跟踪变量，称为一个引用计数器。
当对象被创建时， 就创建了一个引用计数， 当这个对象不再需要时， 
也就是说， 这个对象的引用计数变为0 时， 它被垃圾回收。
但是回收不是"立即"的， 由解释器在适当的时机，将垃圾对象占用的内存空间回收。

析构函数 __del__ ，__del__在对象消逝的时候被调用，当对象不再被使用时，__del__方法运行：


6. 类的继承
继承语法 class 派生类名（基类名）：//... 基类名写作括号里，
基本类是在类定义的时候，在元组之中指明的。
python中继承中的一些特点：
1：在继承中基类的构造（__init__()方法）不会被自动调用，它需要在其派生类的构造中亲自专门调用。
2：在调用基类的方法时，需要加上基类的类名前缀，且需要带上self参数变量。区别于在类中调用普通函数时并不需要带上self参数
3：Python总是首先查找对应类型的方法，如果它不能在派生类中找到对应的方法，它才开始到基类中逐个查找。（先在本类中查找调用的方法，找不到才去基类中找）。
如果在继承元组中列了一个以上的类，那么它就被称作"多重继承" 

派生类的声明，与他们的父类类似，继承的基类列表跟在类名之后，如下所示：
class SubClassName (ParentClass1[, ParentClass2, ...]):
   'Optional class documentation string'
   class_suite

class A:        # 定义类 A
.....
class B:         # 定义类 B
.....
class C(A, B):   # 继承类 A 和 B
.....

你可以使用issubclass()或者isinstance()方法来检测。
issubclass() - 布尔函数判断一个类是另一个类的子类或者子孙类，
语法：issubclass(sub,sup)

isinstance(obj, Class) 
布尔函数如果obj是Class类的实例对象或者是一个Class子类的实例对象则返回true。
================================================================

================================================================
--基础重载方法
1. __init__ ( self [,args...] )     
构造函数
简单的调用方法: obj = className(args)
2. __del__( self )
析构方法, 删除一个对象
简单的调用方法 : dell obj
3. __repr__( self )
转化为供解释器读取的形式
简单的调用方法 : repr(obj)
4. __str__( self )
用于将值转化为适于人阅读的形式
简单的调用方法 : str(obj)
5. __cmp__ ( self, x )
对象比较
简单的调用方法 : cmp(obj, x)
================================================================

================================================================
1. 类属性与方法
类的私有属性
__private_attrs：两个下划线开头，声明该属性为私有，不能在类地外部被使用或直接访问。
在类内部的方法中使用时 self.__private_attrs。

类的方法
在类地内部，使用def关键字可以为类定义一个方法，
与一般函数定义不同，类方法必须包含参数self,且为第一个参数

类的私有方法
__private_method：两个下划线开头，声明该方法为私有方法，不能在类地外部调用。
在类的内部调用 self.__private_methods
================================================================