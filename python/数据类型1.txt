1. Python算术运算符
+ - * /
%   取模 - 返回除法的余数    b % a 输出结果 1
**  幂 - 返回x的y次幂 a**b 为10的21次方
//  取整除 - 返回商的整数部分  9//2 输出结果 4 , 9.0//2.0 输出结果 4.0

2. Python运算符优先级 (最高到最低优先级的所有运算符)
运算符             描述
**              指数 (最高优先级)
~ + -           按位翻转, 一元加号和减号 (最后两个的方法名为 +@ 和 -@)
* / % //        乘，除，取模和取整除
+ -             加法减法
>> <<           右移，左移运算符
&               位 'AND'
^ |             位运算符
<= < > >=       比较运算符
<> == !=        等于运算符
= %= /= //= -= += *= **=    赋值运算符
is is not       身份运算符
in not in       成员运算符
not or and      逻辑运算符

3. 数据类型
数字: var = 1 ;
字符串: var = '字符串' ;
列表: var = [] ;
元组: var = () ;  元组中只包含一个元素时，需要在元素后面添加逗号 var = (12,);
字典: var = {} ;

-------------------------------------------
4. 数字运算
除了布尔类型外
int、long、float和complex都可以使用的运算为：
    加、减、乘、除、整除、幂运算和取余
对于整数还可以进行位运算，共有6种位运算：
    取反(~)、左移(<<)、右移(>>)、异或(^)、按位或(|)、按位与(&)。
布尔类型可以通过布尔表达式取值，布尔比较运算符有6种：
    小于(<)、小于等于(<=)、大于(>)、大于等于(>=)、等于(==)、不等于(!=)。
对于布尔类型还可以进行逻辑运算，有3种运算：
    逻辑非(not)、逻辑非或(or)、逻辑与(and)。

4.1 常用数字类型函数
abs()：返回给定对象的绝对值。
divmod()：把除法和取余运算结合起来，返回一个包含商和余数的元组。
pow()：两个参数，幂运算。三个参数，乘方后取余。
round()：四舍五入
floor()：向下取整， ceil()：向上取整， sqrt()：开方， 需要math模块。

5. 序列类型
序列表示索引为非负数的有序对象集合，包括字符串、列表和元组。字符串是字符的序列，列表和元组是任意对象的序列。字符串和元组是不可变的，而列表可以插入、删除和替换。所有序列支持迭代。

5.1 字符串
表示字符串的方法有很多。
s = 'string'
s = "string" # 和上面单引号一样
s = '''string''' # 三引号之间的内容都被保留，用于多行输入
s = r"string" # 原生字符，关掉字符串中的转义。
s = u"string" # unicode字符串

    方法                                      描述
index(sub[,start[,end]])            找到子字符串sub首次出现的位置，否则返回-1
find(sub[,start[,end]])             找到子字符串sub首次出现的位置，否则报错
startswith(prefix[,start[,end]])    检查是否以prefix开头
count(sub[,start[,end]])            计算子字符串sub出现的次数
decode([encoding[, errors]])        以encoding解码字符串，返回unicode字符串(只用于字节字符串)
encode([encoding[, errors]])        以encoding编码字符串(只用于unicode字符串)
upper()                             返回大写形式
lower()                             返回小写形式
split(sep[,maxsplit])               以sep为分隔符分割字符串，maxsplit为最大分割次数
join(t)                             使用当前字符串为分隔符连接t中的字符串
format(*args, kwargs)               格式化字符串
    "Here is {0},I'm {name}.".format("wuyuans.com", name="wuyuan")

5.2 列表和元组
列表的内容可变 ，可以包含任意对象，使用中括号表示。 
元组的内容不可变 ，可以包含任意对象，使用圆括号表示。

列表的方法
方法                          描述
list(s)                 将s转化为一个列表
s.append(x)             将新元素x加到s的尾部
s.extend(t)             将新列表t加到s的尾部
s.count(x)              计算x的出现次数
s.index(x[, start[, stop]]) 搜索x元素
s.insert(i, x)          在i处添加x
s.pop([i])              弹出第i个元素，如果省略i，弹出最后一个
s.remove(x)             移除x
s.reverse(x)            反转列表
s.sort([key[, reverse]])    排序

序列通用操作
所有序列都可以通过索引来访问，第一个元素的索引为0，-1为最后一个元素，-2倒数第二个，依次类推。 
切片操作：指定索引范围，返回相应的子序列。

5.3 映射类型
字典(dict)是python为唯一的内置映射类型
任何不可变对象都可以用作字典的键值，如字符串、数字、元组等。
字典使用大括号表示，键和值之间用冒号分割，各个键值间用逗号隔开。
映射对象是无序的。 

方法和操作                   描述
len(d)                  返回字典d的项目数
d[k]                    d中键k的值
del d[k]                删除d[k]
k in d                  如果k是d的键值，返回True
d.clear()               清空d
d.copy()                返回d的一个拷贝
d.fromkeys(s[, value])  返回一个新字典，s中的所有元素作为新字典的键，值为value
d.get(k[, v])           返回d[k]，没有则返回v
d.items()               返回由键值组成的序列，主要用于历遍
d.keys()                返回由键组成的序列
d.values()              返回由值组成的序列
d.pop(k[, default])     弹出d[k]，没有则返回default
d.update(b)             将b中对象添加到d中

5.4 集合类型
集合是唯一项的无序集，集合不提供索引或切片操作，集合的长度可变，但放入里面的必须是不可变的。
集合分为两种：可变集合(set)和不可变集合(frozenset)。
s = set([1, 2, 3])
fs = frozenset([1, 2, 3])

python可变数据类型： 列表list[ ]、字典dict{ }
python不可变数据类型： 整型int、字符串str' '、元组tuple（）
------------------------------------------------------













