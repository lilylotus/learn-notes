CLASSPATH= ".;%JAVA_HOME%\lib;%JAVA_HOME%\lib\tools.jar"
JAVA_HOME = "C:\Program Files\Java\jdk1.5.0"
path ="%JAVA_HOME%\bin;%JAVA_HOME%\jre\bin "

来指导编译器在编译的时候去指定的路径下查找引用类

1. 绝对路径：javac -classpath c:/junit3.8.1/junit.jar   Xxx.java
2. 相对路径：javac -classpath ../junit3.8.1/Junit.javr  Xxx.java
3. 系统变量：javac -classpath %CLASSPATH% Xxx.java
注意：%CLASSPATH%表示使用系统变量CLASSPATH的值进行查找，这里假设Junit.jar的路径就包含在CLASSPATH系统变量中


1.何时需要使用-classpath：当你要编译或执行的类引用了其它的类，但被引用类的.class文件不在当前目录下时，就需要通过-classpath来引入类
2.何时需要指定路径：当你要编译的类所在的目录和你执行javac命令的目录不是同一个目录时，就需要指定源文件的路径(CLASSPATH是用来指定.class路径的，不是用来指定.java文件的路径的) 


源文件中有包声明语句时，编译时要使用“-d 路径”参数，表示编译时自动生成与包同名的文件夹，并把类文件放到该文件夹下，目的是运行时让JVM能够在包文件夹下找到要加载的类文件。

源文件中有中文字符时，要编译时要用“-encoding UTF-8”参数，否则编译有乱码。

当要编译的多个源文件有引用关系时，先编译不引用其他类的文件，后编译有引用的文件，否则编译会出现“找不到字符”的错误。
当源文件在非当前路径下时，编译或运行时要用到“-cp 源文件所在路径”参数，表示到所给路径下寻找源文件。


================================================
javac
-classpath，设定要搜索类的路径，可以是目录，jar文件，zip文件（里面都是class文件），会覆盖掉所有在CLASSPATH里面的设定。
-sourcepath， 设定要搜索编译所需 java 文件的路径，可以是目录，jar文件，zip文件（里面都是java文件）。
所以一个完整的javac命令行应该是这样的，

-d 用于指定编译成的class文件的存放位置，缺省情况下不指定class文件的存放目录，编译的class文件将和源文件在同一目录下；
-classpath 可以简写成-cp，用于搜索编译所需的class文件，指出编译所用到的class文件的位置，如jar、zip或者其他包含class文件的目录，指定该选项会覆盖CLASSPATH的设定；
-sourcepath 用于搜索编译所需的源文件（即java文件），指定要搜索的源文件的位置，如jar、zip或其他包含java文件的目录；

假设 abc.java 在路径 c:\src 里面，在任何的目录的都可以执行以下命令来编译。
javac -classpath c:\classes;c:\jar\abc.jar;c:\zip\abc.zip -sourcepath c:\source\project1\src;c:\source\project2\lib\src.jar;c:\source\project3\lib\src.zip c:\src\abc.java

表示编译需要
c:\classes 下面的 class 文件，c:\jar\abc.jar 里面的class文件，c:\zip\abc.zip 里面的class文件
还需要 c:\source\project1\src 下面的源文件，c:\source\project2\lib\src.jar 里面的源文件，
c:\source\project3\lib\src.zip里面的源文件
注意：jar，zip里面的源文件不会有什么改动，目录下的源文件，有可能会被重新编译。

------------------------------
java
-classpath，设定要搜索的类的路径，可以是目录，jar文件，zip文件（里面都是class文件），会覆盖掉所有的CLASSPATH的设定。
由于所要执行的类也是要搜索的类的一部分，所以一定要把这个类的路径也放到 -classpath 的设置里面。
在要执行的类的路径里面执行java时，一定要添加上点号（.）标示本目录也要搜索。

假设abc.class在路径c:\src里面
可以在任何路径下执行以下命令
java -classpath c:\classes;c:\jar\abc.jar;c:\zip\abc.zip;c:\src abc

问题：如果main.class属于c:\jar\abc.jar，并且在com.cnblogs.jeffchen这个包里，那么执行java -classpath c:\classes;c:\jar\abc.jar;c:\zip\abc.zip;com.cnblogs.jeffchen.main即可， 但是如果classpath中包含多个jar包呢？并且其他jar包中也有com.cnblogs.jeffchen会发生什么情况？错误？

在windows下，
文件路径的分割符为反斜杠  \
类或者java文件列表的分割符为分号 ;

在linux下
文件路径的分隔符位斜杠 /
类或者java文件列表的分隔符为冒号 :

一个linux下编译和运行的例子
/usr/local/java/bin/javac -classpath /tmp/javatest/lib/mail-1.3.3.jar -d /tmp/javatest/bin/ /tmp/javatest/src/jp/co/realseed/Capability.java

/usr/local/java/bin/java -classpath /tmp/javatest/lib/mail-1.3.3.jar:/tmp/javatest/bin/ jp.co.realseed.Capability

==========================================
示例：

list.txt:
E:\algorithm\test\BinarySearch.java
E:\algorithm\test\Drill01.java
E:\algorithm\test\DrillClass01.java
E:\algorithm\test\DrillClassMain.java
-----------------------------------------------

SET EXECLASS="com.example.algorithm.BinarySearch"
SET COMPLIERCLASS="E:\algorithm\test\BinarySearch.java"
SET LISTCLASS="@E:\list.txt"
SET CLASS=".;E:\algorithm\algs4-bin.jar;E:\algorithm\test"
SET SOURCEPATH="E:\algorithm\test"

javac -encoding UTF-8 -cp %CLASS% -d %SOURCEPATH% %LISTCLASS%
java -cp %CLASS% %EXECLASS% algorithm\algs4-data\tinyW.txt

javac -encoding UTF-8 -cp %CLASS% -d %SOURCEPATH% %LISTCLASS%

=============================================
java -Xms2048m -Xmx2048m -Xmn1g -Xss512k -cp %CLASS% %EXECOMCLASS% %DATAFILE%

常见参数种类（配置内存）：（-Xms 、-Xmx、-XX:newSize、-XX:MaxnewSize、-Xmn）、（-XX:PermSize、-XX:MaxPermSize）。可以从列参数的配置是分组的，前者是用来配置堆区的，后者是用来配置非堆区的。
第一组配置参数：-Xms 、-Xmx、-XX:newSize、-XX:MaxnewSize、-Xmn

=============================================
可能需要依赖额外的jar包，那么javac 和 Java
在编译和运行时我们也要加上依赖的jar包，需要注意的是，使用 java -cp 有额外的jar的时候：
在Linux下面ClassPath前面是一个点号加一个冒号；在Windows下面ClassPath前面是一个点号加一个分号