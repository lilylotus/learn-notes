1. 堆设置
-Xms            :初始堆大小
-Xmx            :最大堆大小
-XX:NewSize=n   :设置年轻代大小
-XX:NewRatio=n  :设置年轻代和年老代的比值。如:为3，表示年轻代与年老代比值为1：3，年轻代占整个年轻代年老代和的1/4
-XX:SurvivorRatio=n     :年轻代中Eden区与两个Survivor区的比值。
注意Survivor区有两个。如：3，表示Eden：Survivor=3：2，一个Survivor区占整个年轻代的1/5
-XX:MaxPermSize=n   :设置持久代大小

2. 收集器设置
-XX:+UseSerialGC            :设置串行收集器
-XX:+UseParallelGC          :设置并行收集器
-XX:+UseParalledlOldGC      :设置并行年老代收集器
-XX:+UseConcMarkSweepGC     :设置并发收集器

3. 垃圾回收统计信息
-XX:+PrintGC
-XX:+PrintGCDetails
-XX:+PrintGCTimeStamps
-Xloggc:filename

4. 并行收集器设置
-XX:ParallelGCThreads=n     :设置并行收集器收集时使用的CPU数。并行收集线程数。
-XX:MaxGCPauseMillis=n      :设置并行收集最大暂停时间
-XX:GCTimeRatio=n           :设置垃圾回收时间占程序运行时间的百分比。公式为1/(1+n)

5. 并发收集器设置
-XX:+CMSIncrementalMode     :设置为增量模式。适用于单CPU情况。
-XX:ParallelGCThreads=n     :设置并发收集器年轻代收集方式为并行收集时，使用的CPU数。并行收集线程数。

================================================
1. 年轻代大小选择
1.1 响应时间优先的应用：尽可能设大，直到接近系统的最低响应时间限制（根据实际情况选择）。
在此种情况下，年轻代收集发生的频率也是最小的。同时，减少到达年老代的对象。
1.2 吞吐量优先的应用：尽可能的设置大，可能到达 Gbit 的程度。
因为对响应时间没有要求，垃圾收集可以并行进行，一般适合 8CPU 以上的应用。

2. 年老代大小选择
2.1 响应时间优先的应用： 年老代使用并发收集器，所以其大小需要小心设置，一般要考虑并发会话率和会话持续时间等一些参数。
如果堆设置小了，可以会造成内存碎片、高回收频率以及应用暂停而使用传统的标记清除方式；
如果堆大了，则需要较长的收集时间。最优化的方案，一般需要参考以下数据获得：
    并发垃圾收集信息， 持久代并发收集次数， 传统GC信息， 花在年轻代和年老代回收上的时间比例
(减少年轻代和年老代花费的时间，一般会提高应用的效率)

2.2 吞吐量优先的应用：一般吞吐量优先的应用都有一个很大的年轻代和一个较小的年老代。
原因是，这样可以尽可能回收掉大部分短期对象，减少中期的对象，而年老代尽存放长期存活对象。

3. 较小堆引起的碎片问题
因为年老代的并发收集器使用标记、清除算法，所以不会对堆进行压缩。
当收集器回收时，他会把相邻的空间进行合并，这样可以分配给较大的对象。
但是，当堆空间较小时，运行一段时间以后，就会出现“碎片”，如果并发收集器找不到足够的空间，
那么并发收集器将会停止，然后使用传统的标记、清除方式进行回收。如果出现“碎片”，可能需要进行如下配置：
-XX:+UseCMSCompactAtFullCollection  ：使用并发收集器时，开启对年老代的压缩。
-XX:CMSFullGCsBeforeCompaction=0    ：上面配置开启的情况下，这里设置多少次 Full GC 后，对年老代进行压缩

=========================================================
-XX:MetaspaceSize 
是分配给类元数据空间（以字节计）的初始大小(Oracle逻辑存储上的初始高水位，the initial high-water-mark )，此值为估计值。
MetaspaceSize的值设置的过大会延长垃圾回收时间。垃圾回收过后，引起下一次垃圾回收的类元数据空间的大小可能会变大。

-XX:MaxMetaspaceSize
是分配给类元数据空间的最大值，超过此值就会触发Full GC，此值默认没有限制，但应取决于系统内存的大小。JVM 会动态地改变此值。

-XX:MinMetaspaceFreeRatio 表示一次GC以后，为了避免增加元数据空间的大小，空闲的类元数据的容量的最小比例，不够就会导致垃圾回收。
-XX:MaxMetaspaceFreeRatio 表示一次GC以后，为了避免增加元数据空间的大小，空闲的类元数据的容量的最大比例，不够就会导致垃圾回收。