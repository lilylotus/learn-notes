类初始化：
一. 主动引用：
    1. 创建类的实例
    2. 访问静态变量 (除常量 [被 final 修辞的静态变量] 原因:常量一种特殊的变量，
        因为编译器把他们当作值(value)而不是域(field)来对待。
        如果你的代码中用到了常变量(constant variable)，编译器并不会生成字节码来从对象中载入域的值，
        而是直接把这个值插入到字节码中。这是一种很有用的优化，
        但是如果你需要改变final域的值那么每一块用到那个域的代码都需要重新编译。)
    3. 访问静态方法
    4. 反射 (Class.forName("class"))
    5. 当初始化一个类时，发现其父类还未初始化，则先出发父类的初始化
    6. 虚拟机启动时，定义了 main() 方法的那个类先初始化
以上情况称为称对一个类进行"主动引用"，除此种情况之外，均不会触发类的初始化，
称为 "被动引用" 接口的加载过程与类的加载过程稍有不同。接口中不能使用 static{} 块。
当一个接口在初始化时，并不要求其父接口全部都完成了初始化，只有真正在使用到父接口时（例如引用接口中定义的常量）才会初始化。

二. 被动引用
1. 子类调用父类的静态变量，子类不会被初始化。只有父类被初始化。对于静态字段，只有直接定义这个字段的类才会被初始化。
2. 通过数组定义来引用类，不会触发类的初始化
3. 访问类的常量，不会初始化类

三. 类字段初始化 [静态块（静态变量）--> 成员变量 --> 构造方法 --> 静态方法]
1. 先加载类的静态方法 main 出发初始化操作, 调用了的静态方法。
2. 类加载的时候在准备过程中为类的静态变量分配内存并初始化默认值
    对象赋值为 null, 基础类型赋值为默认值， int -> 0, float -> 0.0, double 0.0 等
3. 类初始化，为类的静态变量赋值和执行静态代码快
    注意： 静态代码块和静态变量按照编写的先后顺序执行，哪个在前面那个就先执行。
4. 调用类的实例初始化块，调用类的构造方法

=========================================================================
类初始化的一些规则：
1.类从顶至底的顺序初始化，所以声明在顶部的字段的早于底部的字段初始化
2.超类早于子类和衍生类的初始化
3.如果类的初始化是由于访问静态域而触发，那么只有声明静态域的类才被初始化，而不会触发超类的初始化或者子类的
4.初始化即使静态域被子类或子接口或者它的实现类所引用。
5.接口初始化不会导致父接口的初始化。
6.静态域的初始化是在类的静态初始化期间，非静态域的初始化时在类的实例创建期间。这意味这静态域初始化在非静态域之前。
7.非静态域通过构造器初始化，子类在做任何初始化之前构造器会隐含地调用父类的构造器，他保证了非静态或实例变量（父类）初始化早于子类

如果类还没有被加载：
1、先执行父类的静态代码块和静态变量初始化，并且静态代码块和静态变量的执行顺序只跟代码中出现的顺序有关
2、执行子类的静态代码块和静态变量初始化
3、执行父类的实例变量初始化
4、执行父类的构造函数
5、执行子类的实例变量初始化
6、执行子类的构造函数

如果类已经被加载：
则静态代码块和静态变量就不用重复执行，再创建类对象时，只执行与实例相关的变量初始化和构造方法

注意： 当 JVM 在准备阶段的时候，便会为类变量分配内存和进行初始化。
此时，对象实例变量被初始化为 null，普通对象变量被初始化为 0。

方法论，类的执行顺序大概可以按照如下步骤：
1. 确定类变量的初始值。在类加载的准备阶段，JVM 会为类变量初始化零值，这时候类变量会有一个初始的零值。
如果是被 final 修饰的类变量，则直接会被初始成用户想要的值。
2. 初始化入口方法。当进入类加载的初始化阶段后，JVM 会寻找整个 main 方法入口，从而初始化 main 方法所在的整个类。
当需要对一个类进行初始化时，会首先初始化类构造器（），之后初始化对象构造器（）。
3. 初始化类构造器。JVM 会按顺序收集类变量的赋值语句、静态代码块，最终组成类构造器由 JVM 执行。
4. 初始化对象构造器。JVM 会按照收集成员变量的赋值语句、普通代码块，最后收集构造方法，将它们组成对象构造器，最终由 JVM 执行。
5. 初始化 main 方法所在类的时候遇到了其他类的初始化，那么就先加载对应的类，加载完成之后返回。如此反复循环，最终返回 main 方法所在类。

=========================================================================

类加载过程：
类从被加载到虚拟机内存中开始，到卸载出内存为止，
整个生命周期包括：加载、验证、准备、解析、初始化、使用和卸载 七个阶段.
类加载的过程包括了 [加载、验证、准备、解析、初始化] 五个阶段

另外注意这里的几个阶段是按顺序开始，而不是按顺序进行或完成，
因为这些阶段通常都是互相交叉地混合进行的，通常在一个阶段执行的过程中调用或激活另一个阶段。

Java中的绑定：绑定指的是把一个方法的调用与方法所在的类(方法主体)关联起来，对java来说，绑定分为静态绑定和动态绑定：
1. 静态绑定：即前期绑定。
在程序执行前方法已经被绑定，此时由编译器或其它连接程序实现。针对java，简单的可以理解为程序编译期的绑定。
java当中的方法只有final，static，private和构造方法是前期绑定的。
2. 动态绑定：即晚期绑定，也叫运行时绑定。
在运行时根据具体对象的类型进行绑定。在java中，几乎所有的方法都是后期绑定的。

