.a  静态库 (archive)
.C .c .cc .cp .cpp .cxx    C++源代码（需要编译预处理） 
.h  C或者C++源代码头文件
.ii C++源代码（不需编译预处理）
.o  对象文件
.s  汇编语言代码
.so 动态库
<none>  标准C++系统头文件

预处理 、汇编、编译 、 链接形成可执行文件

-save-temps              Do not delete intermediate files
-save-temps=<arg>        Do not delete intermediate files
-time                    Time the execution of each subprocess
-E                       Preprocess only; do not compile, assemble or link
-S                       Compile only; do not assemble or link
-c                       Compile and assemble, but do not link
-o <file>                Place the output into <file>
-x <language>            Specify the language of the following input files
                       Permissible languages include: c c++ assembler none
                       'none' means revert to the default behavior of
                       guessing the language based on the file's extension

g++ test.cpp -o test //-o用于指定输出文件名 将test.cpp预处理、汇编、编译并链接形成可执行文件。
g++ -E test.cpp 显示终端过程，不生成test.i文件
g++ -E test.cpp -o test.i   将test.cpp预处理生成test.i
g++ -S test.i   将预处理输出的文件test.i汇编成test.s文件，效果与g++ -S test.i -o test.s相同。
g++ -c test.s   将汇编生成的test.s文件编译输出为test.o文件，效果与g++ -c test.s -o test.o相同。
g++ test.o -o test  将编译输出文件test.o链接成最终可执行文件test。
g++ -O1 test.c -o test  使用编译优化级别1编译程序。级别为1~3，级别越大优化效果越好，但编译时间越长

g++ testfun.c test.c -o test    多个文件一起编译

======================================================================================

======================================================================================
asm			else		new			this
auto		enum		operator	throw
bool		explicit	private		true
break		export		protected	try
case		extern		public		typedef
catch		false		register	typeid
char		float		reinterpret_cast	typename
class		for			return		union
const		friend		short		unsigned
const_cast	goto		signed		using
continue	if			sizeof		virtual
default		inline		static		void
delete		int			static_cast	volatile
do			lostruct		wchar_t
double		mutable		switch		while
dynamic_cast			namespace	template	
======================================================================================

======================================================================================
布尔型	bool
字符型	char
整型	int
浮点型	float
双浮点型	double
无类型	void
宽字符型	wchar_t 

char			1 个字节		-127 到 127 或者 0 到 255
unsigned char	1 个字节		0 到 255
signed char		1 个字节		-127 到 127
int				4 个字节		-2147483648 到 2147483647
unsigned int	4 个字节		0 到 4294967295
signed int		4 个字节		-2147483648 到 2147483647
short int		2 个字节		-32768 到 32767
unsigned short int	Range		0 到 65,535
signed short int	Range		-32768 到 32767
long int		4 个字节		-2,147,483,647 到 2,147,483,647
signed long int	4 个字节		与 long int 相同
unsigned long int	4 个字节	0 到 4,294,967,295
float			4 个字节		+/- 3.4e +/- 38 (~7 个数字)
double			8 个字节		+/- 1.7e +/- 308 (~15 个数字)
long double		8 个字节		+/- 1.7e +/- 308 (~15 个数字)
wchar_t			2 或 4 个字节	1 个宽字符

==您可以使用 typedef 为一个已有的类型取一个新的名字。下面是使用 typedef 定义一个新类型的语法：
typedef type newname; 

==枚举类型
enum enum-name { list of names } var-list; 
==定义常量
使用 #define 预处理器。    #define identifier value
使用 const 关键字。        const type variable = value;


当局部变量被定义时，系统不会对其初始化，您必须自行对其初始化。
定义全局变量时，系统会自动初始化为下列值：
int     0
char    '\0'
float   0
double  0
pointer NULL

==数据类型修饰符：
signed
unsigned
long
short

==C++ 存储类
存储类定义 C++ 程序中变量/函数的范围（可见性）和生命周期。这些说明符放置在它们所修饰的类型之前
auto        存储类是所有局部变量默认的存储类。auto 只能用在函数内，即 auto 只能修饰局部变量。
register    存储类用于定义存储在寄存器中而不是 RAM 中的局部变量
static      指示编译器在程序的生命周期内保持局部变量的存在，而不需要在每次它进入和离开作用域时进行创建和销毁
            当 static 用在类数据成员上时，会导致仅有一个该成员的副本被类的所有对象共享。
            static 修饰符也可以应用于全局变量。当 static 修饰全局变量时，会使变量的作用域限制在声明它的文件内。
extern  存储类用于提供一个全局变量的引用，全局变量对所有的程序文件都是可见的
        修饰符通常用于当有两个或多个文件共享相同的全局变量或函数的时候
mutable

==杂项运算符
sizeof              sizeof 运算符返回变量的大小。例如，sizeof(a) 将返回 4，其中 a 是整数。
Condition ? X : Y   条件运算符。如果 Condition 为真 ? 则值为 X : 否则值为 Y。
,                   逗号运算符会顺序执行一系列运算。整个逗号表达式的值是以逗号分隔的列表中的最后一个表达式的值。
.（点）和 ->（箭头） 成员运算符用于引用类、结构和共用体的成员。
Cast                强制转换运算符把一种数据类型转换为另一种数据类型。例如，int(2.2000) 将返回 2。
&   指针运算符 & 返回变量的地址。例如 &a; 将给出变量的实际地址。
*   指针运算符 * 指向一个变量。例如，*var; 将指向变量 var。

==C++ 中的运算符优先级
后缀      () [] -> . ++ - -                   从左到右 
一元      + - ! ~ ++ - - (type)* & sizeof     从右到左 
乘除      * / %                               从左到右 
加减      + -                                 从左到右 
移位      << >>                               从左到右 
关系      < <= > >=                           从左到右 
相等      == !=                               从左到右 
位与      AND  &                              从左到右 
位异或    XOR     ^                           从左到右 
位或 OR   |                                   从左到右 
逻辑与    AND     &&                          从左到右 
逻辑或    OR  ||                              从左到右 
条件      ?:                                  从右到左 
赋值      = += -= *= /= %=>>= <<= &= ^= |=    从右到左 
逗号      ,                                   从左到右 

======================================================================================

======================================================================================
== <cmath>
double cos(double);
该函数返回弧度角（double 型）的余弦。
double sin(double);
该函数返回弧度角（double 型）的正弦。
double tan(double);
该函数返回弧度角（double 型）的正切。
double log(double);
该函数返回参数的自然对数。
double pow(double, double);
假设第一个参数为 x，第二个参数为 y，则该函数返回 x 的 y 次方。
double hypot(double, double);
该函数返回两个参数的平方总和的平方根，也就是说，参数为一个直角三角形的两个直角边，函数会返回斜边的长度。
double sqrt(double);
该函数返回参数的平方根。
int abs(int);
该函数返回整数的绝对值。
double fabs(double);
该函数返回任意一个十进制数的绝对值。
double floor(double);
该函数返回一个小于或等于传入参数的最大整数。

======================================================================================

======================================================================================
1. 数组
type arrayName [ arraySize ];

double balance[5] = {1000.0, 2.0, 3.4, 17.0, 50.0};
double balance[] = {1000.0, 2.0, 3.4, 17.0, 50.0};

int a[3][4] = {  
 {0, 1, 2, 3} ,   /*  初始化索引号为 0 的行 */
 {4, 5, 6, 7} ,   /*  初始化索引号为 1 的行 */
 {8, 9, 10, 11}   /*  初始化索引号为 2 的行 */
};
======================================================================================

======================================================================================
1. 字符串
char greeting[6] = {'H', 'e', 'l', 'l', 'o', ''};
char greeting[] = "Hello";


strcpy(s1, s2);
复制字符串 s2 到字符串 s1。
strcat(s1, s2);
连接字符串 s2 到字符串 s1 的末尾。
strlen(s1);
返回字符串 s1 的长度。
strcmp(s1, s2);
如果 s1 和 s2 是相同的，则返回 0；如果 s1<s2 则返回小于 0；如果 s1>s2 则返回大于 0。
strchr(s1, ch);
返回一个指针，指向字符串 s1 中字符 ch 的第一次出现的位置。
strstr(s1, s2);
返回一个指针，指向字符串 s1 中字符串 s2 的第一次出现的位置。

2. String 类
#include <string>

string str1 = "Hello";

======================================================================================

======================================================================================
1. 指针
int    *ip;    /* 一个整型的指针 */
double *dp;    /* 一个 double 型的指针 */
float  *fp;    /* 一个浮点型的指针 */
char   *ch     /* 一个字符型的指针 */


int  *ptr = NULL;

======================================================================================

======================================================================================
1. C++ 日期 & 时间
 <ctime> 头文件

struct tm {
  int tm_sec;   // 秒，正常范围从 0 到 59，但允许至 61
  int tm_min;   // 分，范围从 0 到 59
  int tm_hour;  // 小时，范围从 0 到 23
  int tm_mday;  // 一月中的第几天，范围从 1 到 31
  int tm_mon;   // 月，范围从 0 到 11
  int tm_year;  // 自 1900 年起的年数
  int tm_wday;  // 一周中的第几天，范围从 0 到 6，从星期日算起
  int tm_yday;  // 一年中的第几天，范围从 0 到 365，从 1 月 1 日算起
  int tm_isdst; // 夏令时
}
======================================================================================